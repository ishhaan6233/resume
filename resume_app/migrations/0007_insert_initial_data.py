# Generated by Django 5.2.6 on 2025-09-14 06:28

from django.db import migrations
from django.utils import timezone
from datetime import datetime


def add_test_user(apps, schema_editor):
    User = apps.get_model("auth", "User")

    # Check if user already exists to avoid duplicates
    if not User.objects.filter(username="test").exists():
        User.objects.create(
            username="test",
            password="pbkdf2_sha256$1000000$KPR92tHMZmqBTR81veBR0L$n4PU1dmJb/FGCSKph2SVH1IgtbAHsk2o2WlQguV0rVs=",
            is_superuser=False,
            is_staff=True,
            is_active=True,
            email="test@test.com",
            date_joined=timezone.make_aware(
                timezone.datetime(2025, 9, 14, 6, 25, 11, 841988)),
            last_login=timezone.make_aware(
                timezone.datetime(2025, 9, 14, 6, 25, 12, 737701))
        )


def add_job_applications(apps, schema_editor):
    JobApplication = apps.get_model("resume_app", "JobApplication")

    data = [
        {"id": 1, "company": "OpenAI", "position": "Software Engineer", "url": "https://openai.com/careers", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Submitted via LinkedIn", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 2, "company": "Google", "position": "ML Engineer", "url": "https://careers.google.com", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Referral from friend", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 3, "company": "Microsoft", "position": "Backend Developer", "url": "https://careers.microsoft.com", "date_applied": datetime(
            2025, 9, 14), "status": "Interview", "notes": "Phone screen scheduled", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 4, "company": "Amazon", "position": "Data Scientist", "url": "https://amazon.jobs", "date_applied": datetime(
            2025, 9, 14), "status": "Rejected", "notes": "No response after interview", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 5, "company": "Meta", "position": "Frontend Developer", "url": "https://www.metacareers.com", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Portfolio attached", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 6, "company": "Netflix", "position": "DevOps Engineer", "url": "https://jobs.netflix.com", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Applied via company website", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 7, "company": "Tesla", "position": "Embedded Systems Engineer", "url": "https://tesla.com/careers", "date_applied": datetime(
            2025, 9, 14), "status": "Offer", "notes": "Received offer letter", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 8, "company": "Spotify", "position": "Product Manager", "url": "https://spotifyjobs.com", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Waiting for recruiter response", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 9, "company": "Apple", "position": "iOS Developer", "url": "https://jobs.apple.com", "date_applied": datetime(
            2025, 9, 14), "status": "Interview", "notes": "Technical interview next week", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
        {"id": 10, "company": "Stripe", "position": "Security Engineer", "url": "https://stripe.com/jobs", "date_applied": datetime(
            2025, 9, 14), "status": "Applied", "notes": "Resume reviewed", "created_at": datetime(2025, 9, 14, 6, 25), "user_id": 1},
    ]

    for item in data:
        JobApplication.objects.create(**item)


def add_user_profile(apps, schema_editort):
    userProfile = apps.get_model("resume_app", "UserProfile")

    data = [
        {"id": 1, "phone": "", "bio": "", "created_at": datetime(
            2025, 9, 14, 6, 25), "user_id": 1},
    ]

    for item in data:
        userProfile.objects.create(**item)


class Migration(migrations.Migration):

    dependencies = [
        ('resume_app', '0006_appearancesettings_accessibilitysettings_and_more'),
    ]

    operations = [
        migrations.RunPython(add_test_user),
        migrations.RunPython(add_job_applications),
        migrations.RunPython(add_user_profile),
    ]
